Use [n] to access a string, starting at n=0.
CTRL + K then C to commend selected chunk of code.
In Visual Studio F6
In Visual Studio select variable and CTRL + R twice to smartly rename it's name. Refactoring!!
In Visual Studio CLTR + H to find and replace.
In Visual Studio in class header file mark/select method prototype and CTRL + . to quickly create method definiton.
In Visual Studio select variables method and F12 to go to the method definition.
In Visual Studio from time to time click "Build" tab and select "Rebuild Solution" or "Rebuild project_name" to get rid of nasty lazy compiling issues!!
Key word "const" among others features also prevents the fucntion from modifying any member variables example -> GetCurrentTry() const; This works only on class functions.
Select "View" tab and click "Task List" to show all comments which starts with "TODO". Use TODO mark in comments when the code should be modified and delete TODO comment. Ommit TODO sign in comment when new code will be added without deleting comment.



Steps to reset your project
1. "Check-out" or "Reset" - to a working commit
2. Delete derived folders & files (that can be generated by UE IDE)
	leave Config, Content & Source folders and .uproject file.
3. Re-open Unreal - form launcher or .uproject file.
4. Generate your IDE project files (right-click on .uproject file & select "Generate VS project files").



If IntelliSense will be givining your sanity for trial, try this:
https://answers.unrealengine.com/questions/299013/uclass-error.html


(F11) to maximize preview window ("play" button).
(SHIFT + F1) to show mouse cursor while in preview ("play") mode
(F8) to eject while preview ("play") mode
To lower viewport quality: https://www.youtube.com/watch?v=NJ1OYXcxfBk&list=PLXWXR2pLy_hWiHbH65HeqO2HZ_hQGFx5B&feature=share&index=2
To lower "play" qualisty: Settings -> Engine Scalability Settings and Settings -> Material Quality Level

How to make safe usage of pointers:
Initialize them in .h file with nullptr
In .cpp before every usage of pointer chceck if it's nullptr.
Smart trick is to use e.g. "if (!PhysicsHandle) { return; }" before Physics Handle interaction.

FString variable type is mutable. You can change it and manipulate.
FText variable type is immutable. It's often used to display some message to the user.

In Visual Studio use "int32" instead of "int" and "FText"/"FString" instead of "std::string". To do so place "using int32 = int;"/"using FString = std::string;" just after all includes.
or you can use #define like so "#define TMap std::map".

For-each loop in C++:
for (char letter : Word) { }
OR
for (auto letter : Word) { }

Key-word "auto" lets compiler decide what type certain variable should be.

Folders & files that can be ommitted in VCS (Version Control System):
-Binaries (folder)
-Build (folder)
-Intermediate (folder)
-Saved (folder)
-project_name.VC.db (file)

If you deleted Visual Studio files then opening the .sln file will yeld erros. To fix that click right on Unreal Engine project file and choose "Generate Visual Studio project files".

AActor* SomeActor;
(*SomeActor).GetName(); //THE SAME
SomeActor->GetName(); //THE SAME "->" accesor operator

Loging something to the UE console:
UE_LOG(LogTemp, Warning, TEXT("Position reporter report for duty!"));

To get IntelliSense hints:
#include "Gameframework/Actor.h"
#include "Engine/World.h"

https://docs.unrealengine.com/latest/INT/Programming/UnrealBuildSystem/IWYUReferenceGuide/index.html

Snapping object to the floor (END key)

ALT + drag to duiplicate an object
Hold L + double-click for temporary work Light

This is a UE predefinied macro which acts as a "cut-and-paste". This happens before code compilation.
UPROPERTY(VisibleAnywhere) 	<- Visible in UE editor but cannot be edited
UPROPERTY(EditAnywhere) 	<- Visible in UE editor can be edited independently in every instance of this class!!
UPROPERTY(EditDefaultsOnly)  	<- Visible in UE editor can be edited only in blueprint edit. Sets same value for all instances of this class!!!
It DON'T end with ";". InteliSense will not show any completion for it so u need to goole for posible parameters.
https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Reference/Properties/

GetOwner() <- gets the parent object
GetWorld() <-gets whole world form which we can get to the wanted object

Collision Volumes:
(CTRL + E) In viewport right-click on object and select edit.
Collision tab -> add something accurate.

Blueprint:
While previewing game click Eject, select object and click Blueprints -> Convert Selected Actor to Blueprint Class
In Content Browser double click on newly created blueprint and select Open Full Blurprint Editor
Blueprint can obtain custom components written by programmer.

Collision filtering:
https://www.unrealengine.com/en-US/blog/collision-filtering

Use:
GetWorld()->LineTraceSingleByObjectType();
GetWorld()->LineTraceSingle MAY BE DEPRECATED

Reference in c++:
https://pl.wikibooks.org/wiki/C%2B%2B/Referencje

To get component of some object:
GetOwner()->FindComponentByClass<Component_class_name>();

Setup user input:
Settings -> Project Settings -> Input
(Action Mappings are key-bindings)
(Axis Mappings are analog-mappings)

If you want to find usage of some method just use VS find function (CTRL + F) in "entire solution".

If player behaves like a ball (makes small jumps over and over) select foor -> right click -> "edit" -> delete colission and add new one. Compile and save changes.

When you add e.g. wall to the scene and changed it size applied texture may look junky. To fix that:
Duplicate currently applied texture, change wall texture to newly created copy, edit it, click on "TexCord" (found in main window) and edit UVTiling.

How to raise action from C++ code to the BluePrint:
https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Reference/Properties/Specifiers/BlueprintAssignable/
And broadcast action like so: "OnOpenRequest.Broadcast();"
In BluePrint editor get that action and... react.

To create a Landscape:
Click "Modes" tab -> click "Landscape" sub-menu -> select "Create New" -> ...(set variables of youre choice) -> Create

To delete a Landscape:
Click "World Outliner" tab -> select Landscape and delete it.

If the Landscape is to large use LightmassImportanceVolume to lower processing power demand.

To create a Landscape layerd material:
Click right on free spot in "Content Browser" -> "New material".
Double click on newly created material -> add "LandscapeLayerBlend".
Connet it with "Base Color" of material.
In the LandscapeLayerBlend Detail window add two Layers.
Add "VectorParameter" to the main material window. Define color in them and connect with LandscapeLayerBlend.

To add material to the Landscape:
Select Landscape in World Outliner, go to the Details tab and ad Landscape Material.
Go to Modes -> Landscape -> Paint; click '+' on the layer -> choose "...(normal)" and then paint the Landscape.

To add textures to the project:
In "Content Browser" click "Add New" -> "Add feature or content pack..."

To make Pawn consisted of multi static meshes:
Create new BluePrint -> Pawn -> edit it -> add static meshes (note parent mesh and child mesh in mesh tree) and choose static mesh in right hand side of the screen.
Edit wanted static mesh and on the right hand side make a new socket.
In BluePrint edit select Viewport tab and asign static mesh to the socket (once again on the right side of the screen). 

To make GUI (Graphic User Interface) in "Content Browser" click "add new" and choose "User interface" -> "Widget BP".

Create new PlayerControllerBP and attach newly created widget to it in EventGraph like so:
EventBeginPlay -> Create ... UIWidget -> AddToViewport

To make stand alone game:
File -> Package project -> ...

To change Partent Class of a Blueprint:
In Blueprint edit window click "Class Settings" tab and in Datails window change parent class.

In cpp 'virtual' method specifyer simply allows to override this method in inheritance tree.

To assign tanks placed in the world to the AI:
Go to TankBP blueprint edit. select "Class Defaults" and in the "Details" window change "AI Contoller Class" to your own class either cpp class or bp.

To get ViewPortSize:
GetViewportSize();

To DeprojectScreenPositionToWorld:
DeprojectScreenPositionToWorld();

GetWorld()->DeltaTimeSeconds;
Allows to create freamerate independent animations.

To Clamp X to be between Min and Max, inclusive
FMath::Clamp(const T X, const T Min, const T Max);

To make cpp class visible in blueprints change CLASS macro to:
UCLASS(meta = (BlueprintSpawnableComponent))

To make cpp method visible in blueprint edit add:
UFUNCTION(BlueprintCallable, Category = "Setup")
void FoundAimingComponent(SomeObjectType* SomeObject
AND in the BeginPlay() method:
FoundAimingComponentSomeObject
It will allow to trigger some action in BP and also get SomeObject reference.

To make cpp method implementable in bp:
UFUNCTION(BlueprintImplementableEvent, Category = "Setup")

To make forward declaration (use to include custom classes; don't use #include) COMPILATION PROCESS OPTIMIZATION:
class ClassName; <- before class body in .h

To add class component form code:
In .h add "ClassName Variable = nullptr;"
In .cpp class constructor add "Variable= CreateDefaultSubobject<ClassName>(FName("Name to display in blueprint edit"));"

Another way of getting "wierd but reliable" time:
FPlatformTime::Seconds();

If you want to want to always open new "things" in new tab rather than new window:
Click "Edit" i UE editor tab -> "Editor Preferencess..." -> "Asset Editor Open Location" -> "Main Window"

To add AI path finding:
Add Nav Mesh Bounds Volumen to the level. AI Contor Movement controller must at least NavMovementComponent.
While adding NavMeshBoundsVolume to the level click "Show" -> "Navigation" ('P' shortcut).

To let AI go in the player direction:
MoveToActor(PlayerActor, HowCloseAIShouldBe);

To get unit vector of a vector:
VectorVariable.GetSafeNormal();

To get result of vector multiplication use:
FVector::DotProduct();

UE4 project build order:
cpp files construction -> BP construction -> BP BeginPlay -> CPP BeginPlay
NOTE: To call BP BeginPlay in BeginPlay cpp method Super::BeginPlay() must be present!!!